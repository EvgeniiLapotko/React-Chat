{"version":3,"sources":["redux/reducers/dialogs.js","redux/reducers/message.js","redux/store.js","components/Buttons/index.js","components/Block/index.js","assets/wave.svg","assets/play.svg","assets/pause.svg","components/Messages/index.js","components/Dialogs/index.js","components/IconReaded/index.js","components/DialogsBlock/index.js","components/Status/index.js","components/InputChat/index.js","components/MessageBlock/index.js","modules/components/LoginForm.js","modules/container/LoginContainer.js","modules/components/RegisterForm.js","modules/container/RegisterContainer.js","pages/Auth.js","core/axios.js","api/dialogs.js","api/message.js","redux/actions/actionDialogs.js","redux/actions/actionMessage.js","container/Dialog.js","container/Message.js","pages/Home.js","App.js","index.js"],"names":["initialState","items","currentDialog","isLoaded","dialogsReducers","state","action","type","payload","messageReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","rootReducer","combineReducers","dialogs","message","store","createStore","applyMiddleware","Button","props","className","classNames","size","Block","children","Message","date","avatar","audio","name","text","created_at","isMe","isReading","attachment","isTyping","user","useState","isPlaying","setIsPlaying","progress","setProgress","currentTime","setCurrentTime","audioRef","useRef","message__isMe","message__isTyping","message__image","length","message__isAudio","src","alt","getAvatar","fullname","ref","preload","onPlaying","onEnded","onPause","onTimeUpdate","duration","current","style","width","onClick","pause","play","pauseSvg","playSvg","waveSvg","number","mins","Math","floor","secs","toFixed","convetTime","map","item","index","img","parseISO","additionalDigits","isToday","format","defaultProps","Dialogs","onSelect","isOnline","_id","e","isReaded","dialogs__icon","unReaded","IconReaded","DialogsBlock","userId","onSearch","inputValue","onSelectDialog","useSelector","Search","placeholder","onChange","target","value","tip","orderBy","description","Status","online","InputChat","setValue","toogleSmile","setToogleSmile","selectedFile","setSelectedFile","useEffect","console","log","active","set","emoji","native","prev","addEmoji","SmileOutlined","htmlFor","CameraOutlined","id","selectedObjectFile","files","key","push","handleInputFile","multiple","SendOutlined","AudioOutlined","MessageBlock","blockRef","LoginForm","values","touched","errors","handleChange","handleBlur","handleSubmit","dirty","isValid","initialValues","remember","onSubmit","Item","validateStatus","login","onBlur","password","Password","htmlType","to","withFormik","mapPropsToValues","validate","setSubmitting","setTimeout","alert","JSON","stringify","displayName","RegisterForm","prefix","UserOutlined","email","hasFeedback","returnPassword","test","Auth","exact","path","component","axios","defaults","baseURL","dialogsApi","getDialogs","get","messageApi","getMessage","actions","getCurrentDialog","setDialogs","getLoaded","bool","fetchDialogs","dispatch","then","data","setMessage","fetchMessage","dialogId","Dialog","setInputValue","Array","from","filtred","setFiltred","useDispatch","actionsDialogs","filter","dialog","toLowerCase","indexOf","messageRef","actionsMessage","scrollTo","Home","TeamOutlined","FormOutlined","EllipsisOutlined","App","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.9182dfdb.chunk.js","sourcesContent":["const initialState = {\r\n    items: [],\r\n    currentDialog: [],\r\n    isLoaded: true,\r\n};\r\n\r\nconst dialogsReducers = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"DIALOGS:SET_ITEMS\":\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n            };\r\n        case \"DIALOGS:SET_CURRENT_DIALOG\":\r\n            return {\r\n                ...state,\r\n                currentDialog: action.payload,\r\n            };\r\n        case \"DIALOGS:SET_LOADED\":\r\n            return {\r\n                ...state,\r\n                isLoaded: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default dialogsReducers;\r\n","const initialState = {\r\n    items: [],\r\n    isLoaded: true,\r\n};\r\n\r\nconst messageReducers = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"MESSAGE:SET_ITEMS\":\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n            };\r\n\r\n        case \"MESSAGE:SET_LOADED\":\r\n            return {\r\n                ...state,\r\n                isLoaded: action.payload,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default messageReducers;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { dialogsReducers, messageReducers } from \"./reducers\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst middleware = [thunk];\r\n\r\nconst rootReducer = combineReducers({\r\n    dialogs: dialogsReducers,\r\n    message: messageReducers,\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { Button as GreatButton } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <GreatButton\r\n            {...props}\r\n            className={classNames(\"button\", {\r\n                \"btn-large\": props.size === \"large\",\r\n            })}\r\n        />\r\n    );\r\n};\r\n\r\nButton.propTypes = {\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport \"./Block.scss\";\r\n\r\nconst Block = ({ children, className }) => {\r\n    return <div className={classNames(\"block\", className)}>{children}</div>;\r\n};\r\n\r\nexport default Block;\r\n","export default __webpack_public_path__ + \"static/media/wave.3f5757ab.svg\";","export default __webpack_public_path__ + \"static/media/play.694745f9.svg\";","export default __webpack_public_path__ + \"static/media/pause.af841eb8.svg\";","import React, { useState, useRef } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport waveSvg from \"../../assets/wave.svg\";\r\nimport playSvg from \"../../assets/play.svg\";\r\nimport pauseSvg from \"../../assets/pause.svg\";\r\nimport { format, parseISO } from \"date-fns\";\r\nimport isToday from \"date-fns/isToday\";\r\nimport \"./Message.scss\";\r\nimport { IconReaded } from \"../index\";\r\n\r\nconst Message = ({\r\n    avatar,\r\n    audio,\r\n    name,\r\n    text,\r\n    created_at,\r\n    isMe,\r\n    isReading,\r\n    attachment,\r\n    isTyping,\r\n    user,\r\n}) => {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const audioRef = useRef();\r\n\r\n    const convetTime = (number) => {\r\n        const mins = Math.floor(number / 60);\r\n        const secs = (number % 60).toFixed();\r\n        return `${mins < 10 ? \"0\" : \"\"}${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n    };\r\n\r\n    const getMessageTime = (date) => {\r\n        if (isToday(date)) {\r\n            return format(date, \"HH:mm\");\r\n        } else {\r\n            return format(date, \"dd.MM.yyyy\");\r\n        }\r\n    };\r\n\r\n    const getPlaying = () => {\r\n        if (!isPlaying) {\r\n            audioRef.current.play();\r\n        } else {\r\n            audioRef.current.pause();\r\n        }\r\n    };\r\n    const onPlayingStart = () => {\r\n        setIsPlaying(true);\r\n    };\r\n    const onEndedEnd = () => {\r\n        setIsPlaying(false);\r\n        setProgress(0);\r\n        setCurrentTime(0);\r\n    };\r\n    const onPausePause = () => {\r\n        setIsPlaying(false);\r\n    };\r\n    const timeUpdate = () => {\r\n        const duration = (audioRef.current && audioRef.current.duration) || 0;\r\n        setCurrentTime(audioRef.current.currentTime);\r\n        setProgress((audioRef.current.currentTime / duration) * 100);\r\n    };\r\n\r\n    const getAvatar = (avatar, name) => {\r\n        if (avatar) {\r\n            return <img src={avatar} alt=\"avatar\" />;\r\n        } else {\r\n            return (\r\n                <div className=\"message__item-anon\">\r\n                    <span>{name ? name[0] : \"AN\"}</span>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n    return (\r\n        <div\r\n            className={classNames(\"message\", {\r\n                message__isMe: isMe,\r\n                message__isTyping: isTyping,\r\n                message__image: attachment && attachment.length === 1,\r\n                message__isAudio: audio,\r\n            })}\r\n        >\r\n            <IconReaded isMe={isMe} isReading={isReading} />\r\n            <div className=\"message__avatar\">\r\n                {getAvatar(avatar, user.fullname)}\r\n            </div>\r\n            {/* <div className=\"message__username\">{name}</div> */}\r\n\r\n            <div className=\"message__block-text\">\r\n                {(text || isTyping || audio) && (\r\n                    <div className=\"wrapper__bubble\">\r\n                        {text && (\r\n                            <div className=\"message__bubble\">\r\n                                <p className=\"message__text\">{text}</p>\r\n                            </div>\r\n                        )}\r\n                        {isTyping && (\r\n                            <div className=\"typing-indicator\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        )}\r\n                        {audio && (\r\n                            <div className=\"message__bubble\">\r\n                                <div className=\"message__audio\">\r\n                                    <audio\r\n                                        ref={audioRef}\r\n                                        src={audio}\r\n                                        preload=\"auto\"\r\n                                        onPlaying={onPlayingStart}\r\n                                        onEnded={onEndedEnd}\r\n                                        onPause={onPausePause}\r\n                                        onTimeUpdate={timeUpdate}\r\n                                    ></audio>\r\n                                    <div\r\n                                        className=\"message__audio-progress\"\r\n                                        style={{ width: progress + \"%\" }}\r\n                                    ></div>\r\n                                    <div className=\"message__audio-info\">\r\n                                        <div className=\"message__audio-btn\">\r\n                                            <button onClick={getPlaying}>\r\n                                                {!isPlaying ? (\r\n                                                    <img\r\n                                                        src={playSvg}\r\n                                                        alt=\"play\"\r\n                                                    />\r\n                                                ) : (\r\n                                                    <img\r\n                                                        src={pauseSvg}\r\n                                                        alt=\"play\"\r\n                                                    />\r\n                                                )}\r\n                                            </button>\r\n                                        </div>\r\n                                        <div className=\"message__audio-wave\">\r\n                                            <img src={waveSvg} alt=\"wave\" />\r\n                                        </div>\r\n                                        <div className=\"message__audio-time\">\r\n                                            {convetTime(currentTime)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                <div className=\"message__attachment\">\r\n                    {attachment &&\r\n                        attachment.map((item, index) => {\r\n                            return (\r\n                                <div\r\n                                    key={index}\r\n                                    className=\"message__attachment-img\"\r\n                                >\r\n                                    <img src={item.img} alt={name} />\r\n                                </div>\r\n                            );\r\n                        })}\r\n                </div>\r\n\r\n                {created_at && (\r\n                    <div className=\"message__date\">\r\n                        {getMessageTime(\r\n                            parseISO(created_at, {\r\n                                additionalDigits: 1,\r\n                            })\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nMessage.defaultProps = {\r\n    name: {},\r\n};\r\n\r\nMessage.propTypes = {\r\n    avatar: PropTypes.string,\r\n    text: PropTypes.string,\r\n    name: PropTypes.object,\r\n    isTyping: PropTypes.bool,\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\nimport { format, parseISO } from \"date-fns\";\r\n\r\nimport isToday from \"date-fns/isToday\";\r\nimport \"./Dialogs.scss\";\r\nimport { IconReaded } from \"../index\";\r\n\r\nconst getMessageTime = (date) => {\r\n    if (isToday(date)) {\r\n        return format(date, \"HH:mm\");\r\n    } else {\r\n        return format(date, \"dd.MM.yyyy\");\r\n    }\r\n};\r\n\r\nconst Dialogs = ({ user, message, isMe, onSelect, currentDialog }) => {\r\n    const getAvatar = (avatar, name) => {\r\n        if (avatar) {\r\n            return <img src={avatar} alt=\"avatar\" />;\r\n        } else {\r\n            return (\r\n                <div className=\"dialogs__item-anon\">\r\n                    <span>{name[0]}</span>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\"dialogs__item\", {\r\n                \"dialogs__item-online\": user.isOnline,\r\n                \"dialogs__item-select\": currentDialog === message._id,\r\n            })}\r\n            onClick={(e) => onSelect(message._id)}\r\n        >\r\n            <div className=\"dialogs__item-avatar\">\r\n                {getAvatar(user.avatar, user.fullname)}\r\n            </div>\r\n            <div className=\"dialogs__item-info\">\r\n                <div className=\"dialogs__item-info-top\">\r\n                    <div className=\"dialogs__item-info-name\">\r\n                        {user.fullname}\r\n                    </div>\r\n                    <div className=\"dialogs__item-info-data\">\r\n                        {getMessageTime(\r\n                            parseISO(message.created_at, {\r\n                                additionalDigits: 1,\r\n                            })\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className=\"dialogs__item-info-bottom\">\r\n                    <div className=\"dialogs__item-info-text\">\r\n                        {message.text}\r\n                    </div>\r\n                    {isMe ? (\r\n                        <IconReaded\r\n                            isMe={isMe}\r\n                            isReading={message.isReaded}\r\n                            dialogs__icon={true}\r\n                        />\r\n                    ) : (\r\n                        <div\r\n                            className={classNames({\r\n                                \"dialogs__item-info-num\": message.unReaded,\r\n                            })}\r\n                        >\r\n                            {message.unReaded ? (\r\n                                <span>{message.unReaded}</span>\r\n                            ) : (\r\n                                \"\"\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nDialogs.propTypes = {\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport { BsCheck, BsCheckAll } from \"react-icons/bs\";\r\n\r\nconst IconReaded = ({ isMe, isReading, dialogs__icon }) => {\r\n    return (\r\n        <>\r\n            {isMe &&\r\n                (isReading ? (\r\n                    <BsCheckAll\r\n                        className={classNames(\"icon__read icon__read--check\", {\r\n                            dialogs__icon: dialogs__icon,\r\n                        })}\r\n                    />\r\n                ) : (\r\n                    <BsCheck\r\n                        className={classNames(\"icon__read\", {\r\n                            dialogs__icon: dialogs__icon,\r\n                        })}\r\n                    />\r\n                ))}\r\n        </>\r\n    );\r\n};\r\n\r\nIconReaded.propTypes = {\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default IconReaded;\r\n","import React from \"react\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport DialogsItem from \"../Dialogs\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./DialogsBlock.scss\";\r\nimport { Input, Empty, Spin } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst DialogsBlock = ({\r\n    items,\r\n    userId,\r\n    onSearch,\r\n    inputValue,\r\n    onSelectDialog,\r\n}) => {\r\n    const isLoaded = useSelector(({ dialogs }) => dialogs.isLoaded);\r\n    const currentDialog = useSelector(({ dialogs }) => dialogs.currentDialog);\r\n    return (\r\n        <div className=\"dialogs\">\r\n            <div className=\"dialogs-search\">\r\n                <Input.Search\r\n                    placeholder=\"Поиск среди диалогов\"\r\n                    onChange={(e) => onSearch(e.target.value)}\r\n                    value={inputValue}\r\n                />\r\n            </div>\r\n            {isLoaded ? (\r\n                <div className=\"chat__window-empty\">\r\n                    <Spin size=\"large\" tip=\"Загрузка диалогов...\" />\r\n                </div>\r\n            ) : !items.length ? (\r\n                <Empty description=\"Никого не найдено\" />\r\n            ) : (\r\n                orderBy(items, [\"created_at\"], [\"desc\"]).map((item, index) => {\r\n                    return (\r\n                        <DialogsItem\r\n                            message={item}\r\n                            user={item.user}\r\n                            key={item._id}\r\n                            isMe={item.user._id === userId}\r\n                            onSelect={onSelectDialog}\r\n                            currentDialog={currentDialog}\r\n                        />\r\n                    );\r\n                })\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nDialogsBlock.propTypes = {\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default DialogsBlock;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport \"./Status.scss\";\r\n\r\nconst Status = ({ online }) => {\r\n    return (\r\n        <div\r\n            className={classNames(\"status\", {\r\n                \"status--online\": online,\r\n            })}\r\n        >\r\n            {online ? \"Online\" : \"Offline\"}\r\n        </div>\r\n    );\r\n};\r\n\r\nStatus.propTypes = {\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Status;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./InputChat.scss\";\r\nimport {\r\n    SmileOutlined,\r\n    CameraOutlined,\r\n    AudioOutlined,\r\n    SendOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Input } from \"antd\";\r\nimport classNames from \"classnames\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\n\r\nconst InputChat = () => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [toogleSmile, setToogleSmile] = useState(false);\r\n    const [selectedFile, setSelectedFile] = useState([]);\r\n\r\n    const toogleClassSmile = () => {\r\n        setToogleSmile(!toogleSmile);\r\n    };\r\n    const addEmoji = (e) => {\r\n        let emoji = e.native;\r\n        setValue((prev) => {\r\n            return prev + emoji;\r\n        });\r\n    };\r\n\r\n    const handleInputFile = (e) => {\r\n        const selectedObjectFile = [];\r\n        for (let key of e.target.files) {\r\n            selectedObjectFile.push(key);\r\n        }\r\n        setSelectedFile(selectedObjectFile);\r\n    };\r\n    useEffect(() => {\r\n        console.log(selectedFile);\r\n    }, [selectedFile]);\r\n    return (\r\n        <div className=\"chat__input\">\r\n            <div className=\"chat__input-smile\">\r\n                <div\r\n                    className={classNames(\"chat__input-smilePicker\", {\r\n                        active: toogleSmile,\r\n                    })}\r\n                >\r\n                    <Picker\r\n                        set=\"apple\"\r\n                        className=\"pickerSmile\"\r\n                        onSelect={(e) => addEmoji(e)}\r\n                    />\r\n                </div>\r\n                <SmileOutlined onClick={toogleClassSmile} />\r\n            </div>\r\n            <Input\r\n                onChange={(e) => setValue(e.target.value)}\r\n                placeholder=\"Введите сообщение...\"\r\n                size=\"large\"\r\n                className=\"chat__input-input\"\r\n                value={value}\r\n            />\r\n            <div className=\"chat__input-action\">\r\n                <label htmlFor=\"file\">\r\n                    <CameraOutlined />\r\n                </label>\r\n                <input\r\n                    type=\"file\"\r\n                    name=\"file\"\r\n                    id=\"file\"\r\n                    className=\"chat__input-fileload\"\r\n                    onChange={(e) => handleInputFile(e)}\r\n                    multiple\r\n                />\r\n                {value ? (\r\n                    <SendOutlined className=\"chat__input-icon--send\" />\r\n                ) : (\r\n                    <AudioOutlined />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nInputChat.propTypes = {\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default InputChat;\r\n","import React from \"react\";\r\nimport Message from \"../Messages\";\r\n\r\nimport { Empty, Spin } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport \"./MessageBlock.scss\";\r\n\r\nfunction MessageBlock({ items, blockRef }) {\r\n    const isLoaded = useSelector(({ message }) => message.isLoaded);\r\n    return (\r\n        <div className=\"chat__window\" ref={blockRef}>\r\n            {isLoaded ? (\r\n                <div className=\"chat__window-empty\">\r\n                    <Spin size=\"large\" tip=\"Загрузка сообщений...\" />\r\n                </div>\r\n            ) : !items.length ? (\r\n                <div className=\"chat__window-empty\">\r\n                    <div>\r\n                        <Empty description=\"Сообщений нет\" />\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div className=\"chat__message-wrapper\">\r\n                    {items.map((item, index) => (\r\n                        <Message {...item} key={index} />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageBlock;\r\n","import React from \"react\";\r\nimport { Button, Block } from \"../../components\";\r\nimport { Form, Input } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction LoginForm(props) {\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        dirty,\r\n        isValid,\r\n    } = props;\r\n    return (\r\n        <Block className=\"block__wrapper\">\r\n            <div className=\"auth__top\">\r\n                <h1 className=\"auth__title\">Войдите в аккаунт</h1>\r\n                <p className=\"auth__subtitle\">\r\n                    Пожалуйста войдите в свой аккаунт\r\n                </p>\r\n            </div>\r\n            <Form\r\n                name=\"loginForm\"\r\n                initialValues={{ remember: true }}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <Form.Item\r\n                    className=\"label__auth input__wrapper\"\r\n                    validateStatus={\r\n                        !touched.login ? \"\" : errors.login ? \"error\" : \"success\"\r\n                    }\r\n                >\r\n                    <Input\r\n                        size=\"large\"\r\n                        placeholder=\"Логин\"\r\n                        id=\"login\"\r\n                        type=\"text\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.login}\r\n                        name=\"login\"\r\n                        className={\r\n                            errors.login && touched.login\r\n                                ? \"text-input error\"\r\n                                : \"text-input\"\r\n                        }\r\n                    />\r\n                    {errors.login && touched.login && (\r\n                        <div className=\"input__suberrors\">{errors.login}</div>\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    className=\"label__auth input__wrapper\"\r\n                    validateStatus={\r\n                        !touched.password\r\n                            ? \"\"\r\n                            : errors.password\r\n                            ? \"errors\"\r\n                            : \"success\"\r\n                    }\r\n                >\r\n                    <Input.Password\r\n                        size=\"large\"\r\n                        placeholder=\"Пароль\"\r\n                        id=\"password\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.password}\r\n                        name=\"password\"\r\n                        className={\r\n                            errors.password && touched.password\r\n                                ? \"text-input error\"\r\n                                : \"text-input\"\r\n                        }\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                        <div className=\"input__suberrors\">\r\n                            {errors.password}\r\n                        </div>\r\n                    )}\r\n                </Form.Item>\r\n                <div className=\"warning__message\">\r\n                    {dirty && !isValid && <span>Ошибка заполнения формы</span>}\r\n                </div>\r\n\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        size=\"large\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        <Link to=\"/im\">Войти в аккаунт</Link>\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n                <Link to=\"/register\" className=\"link__reg\">\r\n                    Зарегестрироваться\r\n                </Link>\r\n            </Form>\r\n        </Block>\r\n    );\r\n}\r\n\r\nexport default LoginForm;\r\n","import LoginForm from \"../components/LoginForm\";\r\nimport { withFormik } from \"formik\";\r\n\r\nexport default withFormik({\r\n    mapPropsToValues: () => ({ login: \"\", password: \"\" }),\r\n\r\n    validate: (values) => {\r\n        const errors = {};\r\n\r\n        if (!values.login) {\r\n            errors.login = \"Обязательно поле\";\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = \"Обязательно поле\";\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    handleSubmit: (values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n        }, 500);\r\n    },\r\n\r\n    displayName: \"LofinForm\",\r\n})(LoginForm);\r\n","import React from \"react\";\r\nimport { Button, Block } from \"../../components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input } from \"antd\";\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\n\r\nfunction RegisterForm(props) {\r\n    const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        dirty,\r\n        isValid,\r\n    } = props;\r\n\r\n    const succes = false;\r\n    return (\r\n        <Block className=\"block__wrapper\">\r\n            <div className=\"auth__top\">\r\n                <h1 className=\"auth__title\">Регистрация</h1>\r\n                <p className=\"auth__subtitle\">Пожалуйста зарегистрируйтесь</p>\r\n            </div>\r\n\r\n            {!succes ? (\r\n                <Form\r\n                    name=\"nest-messages\"\r\n                    className=\"register-form\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                    <Form.Item\r\n                        validateStatus={\r\n                            !touched.name\r\n                                ? \"\"\r\n                                : errors.name\r\n                                ? \"errors\"\r\n                                : \"success\"\r\n                        }\r\n                        className=\"input__wrapper\"\r\n                    >\r\n                        <Input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Ваше Имя\"\r\n                            size=\"large\"\r\n                            prefix={<UserOutlined />}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.name}\r\n                            name=\"name\"\r\n                            className={\r\n                                errors.name && touched.name\r\n                                    ? \"text-input error\"\r\n                                    : \"text-input\"\r\n                            }\r\n                        />\r\n                        {errors.name && touched.name && (\r\n                            <div className=\"input__suberrors\">\r\n                                {errors.name}\r\n                            </div>\r\n                        )}\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        validateStatus={\r\n                            !touched.email\r\n                                ? \"\"\r\n                                : errors.email\r\n                                ? \"errors\"\r\n                                : \"success\"\r\n                        }\r\n                        hasFeedback\r\n                        className=\"input__wrapper\"\r\n                    >\r\n                        <Input\r\n                            id=\"email\"\r\n                            placeholder=\"Email\"\r\n                            size=\"large\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.email}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            className={\r\n                                errors.email && touched.email\r\n                                    ? \"text-input error\"\r\n                                    : \"text-input\"\r\n                            }\r\n                        />\r\n                        {errors.email && touched.email && (\r\n                            <div className=\"input__suberrors\">\r\n                                {errors.email}\r\n                            </div>\r\n                        )}\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        validateStatus={\r\n                            !touched.password\r\n                                ? \"\"\r\n                                : errors.password\r\n                                ? \"errors\"\r\n                                : \"success\"\r\n                        }\r\n                        hasFeedback\r\n                        className=\"input__wrapper\"\r\n                    >\r\n                        <Input.Password\r\n                            id=\"password\"\r\n                            size=\"large\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.password}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            placeholder=\"Пароль\"\r\n                            className={\r\n                                errors.password && touched.password\r\n                                    ? \"text-input error\"\r\n                                    : \"text-input\"\r\n                            }\r\n                        />\r\n                        {errors.password && touched.password && (\r\n                            <div className=\"input__suberrors\">\r\n                                {errors.password}\r\n                            </div>\r\n                        )}\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        validateStatus={\r\n                            !touched.returnPassword\r\n                                ? \"\"\r\n                                : errors.returnPassword\r\n                                ? \"errors\"\r\n                                : \"success\"\r\n                        }\r\n                        hasFeedback\r\n                        className=\"input__wrapper\"\r\n                    >\r\n                        <Input.Password\r\n                            placeholder=\"Повторите Пароль\"\r\n                            size=\"large\"\r\n                            id=\"returnPassword\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.returnPassword}\r\n                            name=\"returnPassword\"\r\n                            type=\"password\"\r\n                            className={\r\n                                errors.returnPassword && touched.returnPassword\r\n                                    ? \"text-input error\"\r\n                                    : \"text-input\"\r\n                            }\r\n                        />\r\n                        {errors.returnPassword && touched.returnPassword && (\r\n                            <div className=\"input__suberrors\">\r\n                                {errors.returnPassword}\r\n                            </div>\r\n                        )}\r\n                    </Form.Item>\r\n                    <div className=\"warning__message\">\r\n                        {dirty && !isValid && (\r\n                            <span>Ошибка заполнения формы</span>\r\n                        )}\r\n                    </div>\r\n                    <Form.Item>\r\n                        <Button\r\n                            onClick={handleSubmit}\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            size=\"large\"\r\n                        >\r\n                            Зарегестрироваться\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            ) : (\r\n                <div className=\"register-check\">\r\n                    <ExclamationCircleOutlined className=\"icons__reg\" />\r\n                    <h2>Ожидается подтверждение аккаунта</h2>\r\n                    <p>Пожалуйста подтвердите свой аккаунт</p>\r\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\r\n                        Подтвердить\r\n                    </Button>\r\n                </div>\r\n            )}\r\n\r\n            <Link to=\"/login\" className=\"link__reg\">\r\n                Уже есть аккаунт\r\n            </Link>\r\n        </Block>\r\n    );\r\n}\r\n\r\nexport default RegisterForm;\r\n","import RegisterForm from \"../components/RegisterForm\";\r\nimport { withFormik } from \"formik\";\r\n\r\nexport default withFormik({\r\n    mapPropsToValues: () => ({\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        returnPassword: \"\",\r\n    }),\r\n    // Custom sync validation\r\n    validate: (values) => {\r\n        const errors = {};\r\n\r\n        if (!values.name) {\r\n            errors.name = \"Обязательно поле\";\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = \"Обязательно поле\";\r\n        } else if (\r\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n        ) {\r\n            errors.email = \"Неверный формат\";\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = \"Обязательно поле\";\r\n        }\r\n\r\n        if (!values.returnPassword) {\r\n            errors.returnPassword = \"Обязательно поле\";\r\n        } else if (values.password !== values.returnPassword) {\r\n            errors.returnPassword = \"Пароли не совпадают\";\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    handleSubmit: (values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n        }, 1000);\r\n    },\r\n\r\n    displayName: \"RegisterForm\",\r\n})(RegisterForm);\r\n","import React from \"react\";\r\nimport { LoginForm, RegisterForm } from \"../modules\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nfunction Auth() {\r\n    return (\r\n        <div className=\"auth\">\r\n            <Route exact path={[\"/\", \"/login\"]} component={LoginForm} />\r\n\r\n            <Route exact path=\"/register\" component={RegisterForm} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Auth;\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"https://612299d2d4462800170548e6.mockapi.io/\";\r\n\r\nexport default axios;\r\n","import { axios } from \"../core\";\r\n\r\nconst dialogsApi = {\r\n    getDialogs: () => axios.get(\"/dialogs\"),\r\n    \r\n};\r\n\r\nexport default dialogsApi;\r\n","import { axios } from \"../core\";\r\n\r\nconst messageApi = {\r\n    getMessage: (id) => axios.get(\"/messages?dialog=\" + id),\r\n};\r\n\r\nexport default messageApi;\r\n","import { dialogsApi } from \"../../api\";\r\n\r\nconst actions = {\r\n    getCurrentDialog: (id) => ({\r\n        type: \"DIALOGS:SET_CURRENT_DIALOG\",\r\n        payload: id,\r\n    }),\r\n    setDialogs: (items) => ({\r\n        type: \"DIALOGS:SET_ITEMS\",\r\n        payload: items,\r\n    }),\r\n    getLoaded: (bool) => ({\r\n        type: \"DIALOGS:SET_LOADED\",\r\n        payload: bool,\r\n    }),\r\n    fetchDialogs: () => (dispatch) => {\r\n        dispatch(actions.getLoaded(true));\r\n        dialogsApi.getDialogs().then(({ data }) => {\r\n            dispatch(actions.setDialogs(data));\r\n            dispatch(actions.getLoaded(false));\r\n        });\r\n    },\r\n};\r\n\r\nexport default actions;\r\n","import { messageApi } from \"../../api\";\r\n\r\nconst actions = {\r\n    setMessage: (item) => ({\r\n        type: \"MESSAGE:SET_ITEMS\",\r\n        payload: item,\r\n    }),\r\n    getLoaded: (bool) => ({\r\n        type: \"MESSAGE:SET_LOADED\",\r\n        payload: bool,\r\n    }),\r\n    fetchMessage: (dialogId) => (dispatch) => {\r\n        dispatch(actions.getLoaded(true));\r\n        messageApi.getMessage(dialogId).then(({ data }) => {\r\n            dispatch(actions.setMessage(data));\r\n            dispatch(actions.getLoaded(false));\r\n        });\r\n    },\r\n};\r\n\r\nexport default actions;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DialogsBlock as BaseDialogs } from \"../components\";\r\nimport { actionsDialogs } from \"../redux/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction Dialog({ items, userId }) {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [filtred, setFiltred] = useState(Array.from(items));\r\n    const dispatch = useDispatch();\r\n    const dialogs = useSelector((state) => state.dialogs);\r\n\r\n    useEffect(() => {\r\n        if (!dialogs.items.length) {\r\n            dispatch(actionsDialogs.fetchDialogs());\r\n        } else {\r\n            setFiltred(dialogs.items);\r\n        }\r\n    }, [dialogs.items, dispatch]);\r\n\r\n    const onChangeInput = (value) => {\r\n        setFiltred(\r\n            dialogs.items.filter(\r\n                (dialog) =>\r\n                    dialog.user.fullname\r\n                        .toLowerCase()\r\n                        .indexOf(value.toLowerCase()) >= 0\r\n            )\r\n        );\r\n        setInputValue(value);\r\n    };\r\n\r\n    const dispatchSelectDialog = (id) => {\r\n        dispatch(actionsDialogs.getCurrentDialog(id));\r\n    };\r\n\r\n    return (\r\n        <BaseDialogs\r\n            items={filtred}\r\n            onSearch={onChangeInput}\r\n            inputValue={inputValue}\r\n            userId={userId}\r\n            onSelectDialog={dispatchSelectDialog}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Dialog;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { MessageBlock as BaseMessage } from \"../components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { actionsMessage } from \"../redux/actions\";\r\n\r\nfunction Message({ items }) {\r\n    const messageRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const message = useSelector((state) => state.message);\r\n    const currentDialog = useSelector(({ dialogs }) => dialogs.currentDialog);\r\n\r\n    useEffect(() => {\r\n        dispatch(actionsMessage.fetchMessage(currentDialog));\r\n    }, [currentDialog, dispatch]);\r\n\r\n    useEffect(() => {\r\n        messageRef.current.scrollTo(0, 5555);\r\n    }, [message.items]);\r\n    return (\r\n        <>\r\n            <BaseMessage items={message.items} blockRef={messageRef} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Status, InputChat } from \"../components\";\r\nimport { Dialog, Message } from \"../container\";\r\nimport {\r\n    TeamOutlined,\r\n    FormOutlined,\r\n    EllipsisOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"wrapper__chat\">\r\n                <div className=\"chat__sidebar\">\r\n                    <div className=\"chat__sidebar-header\">\r\n                        <div>\r\n                            <TeamOutlined className=\"chat__sidebar-icon chat__sidebar-icon--users\" />\r\n                            <span className=\"chat__sidebar-text\">\r\n                                Список диалогов\r\n                            </span>\r\n                        </div>\r\n                        <FormOutlined className=\"chat__sidebar-icon chat__sidebar-icon--edit\" />\r\n                    </div>\r\n\r\n                    <Dialog items={[]} userId={3} />\r\n                </div>\r\n\r\n                <div className=\"chat\">\r\n                    <div className=\"chat__header\">\r\n                        <div className=\"chat__header-title\">\r\n                            <div className=\"chat__header-name\">\r\n                                Федор Федорович\r\n                            </div>\r\n                            <div className=\"chat__header-status\">\r\n                                <Status online={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"chat__header-dots\">\r\n                            <EllipsisOutlined className=\"chat__header-dots--icon\" />\r\n                        </div>\r\n                    </div>\r\n                    <Message items={[]} />\r\n                    <div className=\"chat__window-input\">\r\n                        <InputChat />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport Auth from \"./pages/Auth\";\r\nimport Home from \"./pages/Home\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Route exact path={[\"/\", \"/login\", '/register']} component={Auth} />\r\n\r\n            <Route exact path=\"/im\" component={Home} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nimport \"./styles/index.scss\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}